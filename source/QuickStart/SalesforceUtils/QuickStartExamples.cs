using System;
using System.IO;
using System.ServiceModel;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;

using SfdcEnterprise;       // Enterprise WSDL generated by Salesforce. Note the small modification in the README.

namespace SalesforceUtils
{
    /// <summary>
    /// Quick Start example to enter an Account
    /// </summary>
    public static class QuickStartExamples
    {
        // Initialize login parameters
        private static String userName = Environment.GetEnvironmentVariable("sfdcUserName", EnvironmentVariableTarget.Process);
        private static String password = Environment.GetEnvironmentVariable("sfdcPassword", EnvironmentVariableTarget.Process);
        private static String securityToken = Environment.GetEnvironmentVariable("sfdcSecurityToken", EnvironmentVariableTarget.Process); 

        private static SoapClient loginClient; // for login endpoint
        private static SoapClient soapClient; // for API endpoint
        private static SessionHeader header;
        private static EndpointAddress endpoint;

        private static loginRequest loginRequest;
        private static loginResponse lresp;

        /// <summary>
        /// Representation of Salesforce Account object (not complete)
        /// </summary>
        public class AccountData
        {
            public string name { get; set; }    
            public string accountNumber { get; set; }
            public string industry { get; set; }
            public string type { get; set; }
            public string website { get; set; }
        }

        [FunctionName("AddAccounts")]
        public static async Task<IActionResult> Run(
            [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
            ILogger log)
        {
            log.LogInformation("Create Salesforce Account - function processed a request.");

            string requestBody = await new StreamReader(req.Body).ReadToEndAsync();

            AccountData a = JsonConvert.DeserializeObject<AccountData>(requestBody as string);

            bool success = true;

            // If the login and soap clients are not initiated, then initialize
            if (loginClient == null || soapClient == null)
            {
                success = await InitializeClients();

                // Response message
                string initMessage = success
                    ? "Salesforce Web Clients created successfully."
                    : $"Salesforce Web Clients not created successfully.";

                Console.WriteLine(initMessage);

                if(!success)
                {
                    return new OkObjectResult(initMessage);
                }
            }

            //Copy JSON object to Salesforce
            Account account = new();
            account.Name = a.name;
            account.AccountNumber = a.accountNumber;
            account.Industry = a.industry;
            account.Type = a.type;
            account.Website = a.website;

            var objects = new sObject[] { account };

            createRequest cr = new();
            cr.sObjects = objects;
            cr.SessionHeader = header;

            createResponse cresponse;

            String resultId = "";

            try
            {
                cresponse = await soapClient.createAsync(cr);

                SaveResult[] saveResult = cresponse.result;

                if(saveResult != null && saveResult.Length > 0)
                {
                    resultId = saveResult[0].id;
                }
            }
            catch (Exception ex) 
            { 
                Console.WriteLine(ex.ToString()); 
            }

            // Response message
            string responseMessage = string.IsNullOrEmpty(resultId)
                ? "Salesforce Account not created successfully."
                : $"Salesforce Account {resultId} created successfully.";

            log.LogInformation(responseMessage);

            return new OkObjectResult(responseMessage);
        }

        /// <summary>
        /// Utility method to initialize both SoapClient objects
        /// </summary>
        /// <returns></returns>
        private static async Task<bool> InitializeClients()
        {
            bool success = false;

            var binding = new BasicHttpBinding(BasicHttpSecurityMode.Transport);
            var loginAddress = new EndpointAddress(string.Format("https://login.salesforce.com/services/Soap/c/{0:f1}", 53.0));

            loginClient = new SoapClient(binding, loginAddress);

            lresp = await SfLogin();

            if (lresp.result.passwordExpired)
            {
                Console.WriteLine("An error has occurred. Your password has expired.");
            }

            // On successful login, cache session info and API endpoint info
            endpoint = new EndpointAddress(lresp.result.serverUrl);

            header = new SessionHeader();
            header.sessionId = lresp.result.sessionId;

            // Create and cache an API endpoint client
            soapClient = new SoapClient(binding, endpoint);

            return success;
        }

        /// <summary>
        /// Login to Salesforce
        /// </summary>
        /// <returns>Login Response</returns>
        static async Task<loginResponse> SfLogin()
        {

            loginResponse lr = null;

            try
            {
                LoginScopeHeader loginScopeHeader = new LoginScopeHeader();
                loginRequest = new loginRequest(loginScopeHeader, userName, password + securityToken);
                lr = await loginClient.loginAsync(loginRequest);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.StackTrace);
            }


            return lr;
        }
    }
}
